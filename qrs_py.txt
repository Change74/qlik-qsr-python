Help on module qrs_py:

NAME
    qrs_py

FILE
    /home/clint/Documents/qlik-qsr-python/qrs_py.py

CLASSES
    Qrs
    
    class Qrs
     |  Instantiates the Qlik Repository Service Class
     |  
     |  Methods defined here:
     |  
     |  __init__(self, server, certificate, root)
     |      Establishes connectivity with Qlik Sense Repository Service
     |      :param server: servername.domain:4242
     |      :param certificate: path to client.pem and client_key.pem certificates
     |      :param root: path to root.pem certificate
     |  
     |  add_node(self, name, hostname, engineenabled, proxyenabled, schedulerenabled, printingenabled)
     |      Adds a node to an existing Qlik Sense site
     |      :param name: The name of the node
     |      :param hostname: server hostname / FQDN
     |      :param engineenabled: Booleen value for whether new node has an engine
     |      :param proxyenabled: Booleen value for whether new node has an proxy
     |      :param schedulerenabled: Booleen value for whether new node has an schedulder
     |      :param printingenabled: Booleen value for whether new node has printing
     |  
     |  add_stream(self, name)
     |      Adds a new Stream to the Qlik Sense server
     |      :param name: The name of the new Stream
     |  
     |  concsvjson(self, filename)
     |      Converts the text or csv file to a JSON file and returns the path and name of the file
     |      :param filename: Path and filename of the text or csv file to be imported
     |  
     |  copy_app(self, name, appid)
     |      Copies an application within Qlik Ssnese
     |      :param name: Name of the new application
     |      :param appid: ID of the Qlik Sense application to copy
     |  
     |  csvrowcount(self, filename)
     |      Returns the count of rows minus the header of the file
     |      :param filename: Path and filename of the text or csv file to be imported
     |  
     |  export_app(self, appid, filename)
     |      Exports the Qlik Sense application
     |      :param appid: The application id name to export
     |      :param filename: The path and filename to export the application to
     |      :usage: export_app(r'8dadc1f4-6c70-4708-9ad7-8eda34da0106', r'c:\someolder\app.qvf')
     |  
     |  export_certificates(self, machinename, certificatepassword, includesecret, exportformat)
     |      Exports certificates from the Central Node - saved to C:\ProgramData\Qlik\Sense\Repository\Exported Certificates
     |      :param machinename: Computername to link to the certificates
     |      :param certificatepassword: Password to secure certificate private key
     |      :param includesecret: Include private key (True, False)
     |      :param exportformat: Format of export (Windows, Pem)
     |  
     |  get_about(self)
     |      Gets Qlik Sense Server information
     |  
     |  get_app(self, param, value)
     |      Gets the applications from Qlik Sense Server
     |      :param param: None for no filter, filter values otherwise. eg stream.name eq
     |      :param value: Value to filter on.
     |  
     |  get_app_count(self)
     |      Gets the count of applications from the Qlik Sense Server
     |  
     |  get_customproperty(self)
     |      Gets the custom properties from the Qlik Sense Server
     |  
     |  get_data_conn(self)
     |      Gets data connections from Qlik Sense
     |  
     |  get_emptyserverconfigurationcontainer(self)
     |      Creates an empty server configuration container
     |  
     |  get_engineservice(self, id)
     |      Gets the details of the engine service specified by the id
     |      :param id: id of the engine service
     |  
     |  get_exportappticket(self, appid)
     |      Gets a one time ticket to export an application
     |      :param appid: id of the application
     |  
     |  get_extension(self)
     |      Gets the extensions installed on Qlik Sense
     |  
     |  get_license(self)
     |      Gets the Qlik Sense Server license details and returns the ID
     |      :return: License ID
     |  
     |  get_qliknode(self)
     |      Gets the server node configuration
     |  
     |  get_rule(self)
     |      Gets the security rules from the Qlik Sense Server
     |  
     |  get_serverconfig(self)
     |      Gets the local server configuration container
     |  
     |  get_servicestate(self)
     |      Gets the service state of the QRS
     |  
     |  get_stream(self, param, value)
     |      Gets the Qlik Streams on the Qlik Sense Server or if filter used returns the Streams ID
     |      :param param: Allows filtering on the name of the stream. Use None for no filter
     |      :param value: the value of the filter
     |      :return: id of stream
     |  
     |  get_tag(self)
     |      Gets the Tags from the Qlik Sense Server
     |  
     |  get_task(self)
     |      Gets the tasks from the Qlik Sense Server
     |  
     |  get_userdirectory(self)
     |      Gets the user directories configured on the Qlik Sense Server
     |  
     |  get_users(self)
     |      Gets the users from Qlik Sense
     |  
     |  import_app(self, name, filename)
     |      Imports a binary QVF Qlik Sense application to Qlik Sense Server
     |      :param name: The name of the application that will be displayed in Qlik Sense
     |      :param filename: The path and filename for the QVF file
     |  
     |  import_customproperty(self, filename)
     |      Imports custom properties into Qlik Sense
     |      :param filename: Path and filename to JSON file
     |      "App","ContentLibrary","DataConnection","EngineService","Extension","ProxyService","ReloadTask",
     |      "RepositoryService","SchedulerService","ServerNodeConfiguration","Stream","User","UserSyncTask",
     |      "VirtualProxyConfig"
     |      {
     |          "name": "FOO",
     |          "valueType": "BAR",
     |          "choiceValues":
     |              ["FOO",
     |              "BAR"],
     |          "objectTypes":
     |              ["App",
     |               "RepositoryService"]}
     |      :usage: import_customproperty(r'c:\some\folder\file.txt')
     |  
     |  import_extension(self, filename)
     |      Imports the extension to Qlik Sense
     |      :param filename: The path and filename of the extension (make sure its a zip archive)
     |      :usage: import_extension(r'c:\someolder\file.zip')
     |  
     |  import_tag(self, filename)
     |      Imports Tags from a text or csv file
     |      :param filename: The path and filename of the text or csv file
     |      :usage import_tag(r'c:\some\folder\file.txt')
     |  
     |  import_users(self, filename)
     |      Posts users from file into Qlik Sense
     |      :param filename: Path and filename to txt or csv file containing users
     |      :example import_users(r'c:\some\folder\file.txt')
     |  
     |  publish_app(self, appid, stream, name)
     |      Publishes the Qlik Sense application to the selected stream with the name
     |      :param appid: ID of the application to publish
     |      :param stream: Stream name to publish the application to
     |      :param name: Name of application once published
     |  
     |  register_node(self, name, hostname, engineenabled, proxyenabled, schedulerenabled, printingenabled)
     |      Not working currently
     |      :param name:
     |      :param hostname:
     |      :param engineenabled:
     |      :param proxyenabled:
     |      :param schedulerenabled:
     |      :param printingenabled:
     |      :return:
     |  
     |  remove_app(self, appid)
     |      Deletes a Qlik Sense application
     |      :param appid: Name of the application to delete
     |  
     |  remove_customproperty(self, id)
     |      Removes a custom property
     |      :param id: id of the custom property to delete
     |  
     |  remove_license(self)
     |      Deletes the license from Qlik Sense Server
     |  
     |  remove_stream(self, id)
     |      Removes a Stream from the server, applications become unpublished
     |      :param id: ID of the stream to delete
     |  
     |  remove_tag(self, id)
     |      Removes a tag
     |      :param id: ID of the tag to delete
     |  
     |  set_license(self, control, serial, name, organization)
     |      Licenses Qlik Sense Server
     |      :param control: License control number
     |      :param serial: License serial number
     |      :param name: License name
     |      :param organization: License organization
     |  
     |  start_task(self, taskid)
     |      Start a task (for example, a reload task), identified by {id}, so that it runs on a Qlik
     |                                                              Sense Scheduler Service (QSS).
     |      :param taskid: id of the task
     |  
     |  sync_userdirectory(self, id)
     |      Synchronises the user directory specified by the id
     |      :param id: id of the user directory
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  headers()
     |  
     |  jsonfieldnames(self, filename)
     |      Returns the header row of the file to create the structure of the json file
     |      :param filename: Path and filename of the text or csv file to be imported

FUNCTIONS
    set_xrf()

DATA
    xrf = 'bzB8NZGr0qSkMY9Q'


